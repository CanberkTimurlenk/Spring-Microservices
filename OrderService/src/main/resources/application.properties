spring.application.name=OrderService
###########
# Docker #
###########
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:mysql://localhost:3306/OrderService?allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=secret
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
server.port=8080
eureka.client.service-url.defaultZone=http://localhost:9999/eureka/

resilience4j.circuitbreaker.instances.getInfoCBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.getInfoCBreaker.failureRateThreshold=50
# When the failure rate is equal or greater than the threshold the CircuitBreaker
# transitions to open and starts short-circuiting calls.
resilience4j.circuitbreaker.instances.getInfoCBreaker.minimumNumberOfCalls=5
#Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate.
#For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated.
#If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed.
resilience4j.circuitbreaker.instances.getInfoCBreaker.automaticTransitionFromOpenToHalfOpenEnabled=true
# If set to true it means that the CircuitBreaker will automatically transition from open to half-open state and not call is need to trigger the transition.
resilience4j.circuitbreaker.instances.getInfoCBreaker.waitDurationInOpenState=5s
#The time that the CircuitBreaker should wait before transitioning from open to half-open.
resilience4j.circuitbreaker.instances.getInfoCBreaker.permittedNumberOfCallsInHalfOpenState=3
#Configures the number of permitted calls when the CircuitBreaker is half open.
resilience4j.circuitbreaker.instances.getInfoCBreaker.slidingWindowSize=10
#Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
resilience4j.circuitbreaker.instances.getInfoCBreaker.slidingWindowType=COUNT_BASED
#Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
#Sliding window can either be count-based or time-based.
#If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
#If the sliding window is TIME_BASED, the calls of the last slidingWindowSize seconds recorded and aggregated.


# To Expose Specific Details from Actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health
management.health.circuitbreakers.enabled=true